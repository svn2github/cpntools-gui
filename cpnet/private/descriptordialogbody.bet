(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN '../descriptordialog';

-- DescriptorDialogLib: Attributes --

Triangle: IndexTriangle
  (# 
     triangleColor::
       (# 
       do lightblueish[] -> c[];
          c.darken -> c[];
          c.darken -> c[];
       #);
     indexPosition::
       (# 
       do (THIS(Snapable).x,THIS(Snapable).y) -> (p.x,p.y);
       #);
     onMouseUp::
       (# 
       do toggle;
       #);
  #);

DescriptorIndex: abstractwsIndex
  (# getBackgroundColor::
       (# 
       do purple[] -> c[];
          (for i:22 repeat
               c.lighten -> c[];
          for);
       #);
     maxBackgroundHeight::<
       (# 
       do THIS(World).height/2 -> maxHeight;
       #);
     
     DescriptorNode: IndexNode
       (# content: ^Text;
          getName:: (# do content[] -> name[] #);
          init::
            (# theContent: ^Text;
            enter theContent[]
            do theContent[] -> content[];
            #);
       #);
     createNode:
       (# content: ^Text;
          theDescriptorNode: ^DescriptorNode;
       enter content[]
       do &DescriptorNode[] -> theDescriptorNode[];
          content[] -> theDescriptorNode.init;
          theDescriptorNode[] -> addIndexNode;
       #);
     createNodes:
       (# string: ^Text;
       enter string[]
       do string.reset;
          loop:
            (if not string.EOS then
                string.getline -> createNode;
                restart loop;
            if);
       #);
     init::
       (# string: ^Text;
       enter string[]
       do (if string[] = NONE then
              'description is empty' -> string[];
          if);
          string[] -> createNodes;
       #);
  #);

-- DescriptorDialogPrivate:descriptor --
(# proxy: ^Triangle;
   theIndex: ^DescriptorIndex;
#)

-- DescriptorDialogInit:dopart --
do &Triangle[] -> private.proxy[];
   private.proxy.init;
   
-- DescriptorDialogUpdate:doPart --
do (if not hideProxy then
       private.proxy.present -> presentation.add;
   if);
   (if visible then
       delta -> (private.theIndex.x,private.theIndex.y);
       private.theIndex.changed;
       private.theIndex.present -> presentation.add;
   if);
   
-- DescriptorDialogShowIndex:doPart --
do &DescriptorIndex[] -> private.theIndex[];
   true -> private.theIndex.packLeft;
   getDescriptor -> private.theIndex.init;
   true -> visible;
   
-- DescriptorDialogClearIndex:doPart --
do NONE -> private.theIndex[];
   false -> visible;
   update;
   
-- DescriptorDialogToggle: doPart --
do (if visible then
       clearIndex;
    else
       showIndex;
   if);
   update;
