(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN '~beta/postwimp/workspace';
INCLUDE '../debug';
INCLUDE '../resources/default-values';

---Workspacelib: attributes---

CpnToken: Composite
  (# number: @integer;
     tw, th: @real;
     
     shadow: @Ellipse
       (# init::
            (# bs: ^BasicStyle;
               cs: ^CompositeStyle;
            do tw - 4 -> width;
               th - 4 -> height;
               &CompositeStyle[] -> cs[] -> theStyle[];
               &BasicStyle[] -> bs[] -> cs.add;
               4 -> &ShadowStyle -> cs.add;
               1 -> x -> y;
               black[] -> bs.stroke[];
            #);
          update:
            (# 
            do tw - 4 -> width;
               th - 4 -> height;
            #)
       #);

      circ: @Ellipse
       (# init::
            (# bs: ^BasicStyle;
            do tw -> width;
               th ->height;
               &BasicStyle[] -> bs[] -> theStyle[];
               token_color -> bs.fill[];
            #);
          update:
            (# 
            do tw -> width;
               th ->height;
            #)
       #);
     num: @TextItem
       (# init::
            (# 
            do black[] -> &StrokeStyle -> theStyle[];
               arial.descent+1->y; (* all numbers are above baseline *)
            #);
       #);
     init::
       (# 
       do 18 -> tw->th;
          num.init;
          shadow.init;
          circ.init;
          shadow[] -> add;
          circ[] -> add;
          num[] -> add;
       #);
     update:
       (# t: ^text;
          xmin,xmax,ymin,ymax,w,h: @Real;
	 enter number
       do 
              &text[] -> t[];
              number->t.putint;
              t[] -> num.content[];
              num.bounds -> (xmin,xmax,ymin,ymax);
              -(xmax-xmin)/2 -> num.x;
              (xmax-xmin)+8 -> tw;
              (if tw<th then th->tw if);
		  shadow.update;
              circ.update;
       #);
  #);
