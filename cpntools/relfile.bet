(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN '~beta/basiclib/betaenv';
INCLUDE '~beta/basiclib/file';
INCLUDE '~beta/sysutils/envstring';
INCLUDE '~beta/comlib/unicodetext';
INCLUDE 'debug.bet';
MDBODY nti 'private/relfile_ntibody'
default 'private/relfile_unixbody';

-- lib : attributes --
getTemporaryPath:
  (#	t: ^text;
  <<SLOT getTempPathDoPart: doPart >>
  exit t[]
  #);

temporaryFile:
  (#	theRelativeName: ^text;
     tmp: @text;
  enter	theRelativeName[]
  do	getTemporaryPath -> tmp.puttext;
     theRelativeName[]->tmp.puttext;
     '\\'->tmp.findAll
     (#
     do	('/',inx)->tmp.inxPut;
     #);
  exit	tmp[]
  #);

relativeFile:
  (#	entry:@DiskEntry;
     theRelativeName:^text;
     tmp:^text;
  enter	theRelativeName[]
  do	1->arguments->entry.path;
     entry.path.head->tmp[];
     '\\'->tmp.puttext;
     theRelativeName[]->tmp.puttext;
     '\\'->tmp.findAll
     (#
     do	('/',inx)->tmp.inxPut;
     #);
  exit	tmp[]
  #);

utf8ify:
(#
	input: ^text;
	wresult: ^wtext;
	output: @text;
	enter	input[]
	do	'Translating `%s\'' -> debugUnicode (# do input[] -> s; #);
		input[] -> ascii2wText -> wresult[];
		wresult.reset;
		wresult.scan (#
		do	(if true
			// ch <= 0x7f then
				ch -> output.put;
			// ch <= 0x7ff then
				0xc0 %bor (ch %srl 6) -> output.put;
				0x80 %bor (ch %band 0x3f) -> output.put;
			// ch <= 0xffff then
				0xd0 %bor (ch %srl 12) -> output.put;
				0x80 %bor ((ch %srl 6) %band 0x3f) -> output.put;
				0x80 %bor (ch %band 0x3f) -> output.put;
			(* wchar does not support values > 0xffff so don't care, I suppose *)
			if);
		#);
		(if debugging then
			'Translated value: `%s\'' -> debugUnicode (# do output[] -> s; #);
			(# tmp: @text;
			do	output.reset;
				output.scan (#
				do	'\\' -> tmp.puttext;
					ch -> tmp.putint;
				#);
				'Raw value: %s' -> debugUnicode (# do tmp[] -> s; #);
			#);
			output.reset;
		if);
	exit	output[]
#);

cygwinify:
(#
	name: ^text;
	tmp: @text;
	result: @text;
	utf8: ^text;
	enter	name[]
	do	name[] -> tmp.puttext;
		'\\'->tmp.findAll
		(#
			do	('/',inx) -> tmp.inxPut;
		#);
		(if (tmp.length >= 3) and ((2 -> tmp.inxget) = ':') and ((3 -> tmp.inxget) = '/') then
			'/cygdrive/' -> result.puttext;
			1 -> tmp.inxget -> result.put;
			'/' -> result.put;
			(4, tmp.length) -> tmp.sub -> result.puttext;
			result[] -> ascii2wText;
		else
			tmp[] -> result.puttext;
		if);
		result[] -> utf8ify -> utf8[]
	exit	utf8[]
#);

