(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN '../cpnworkspace';

INCLUDE 'cpncommands';
INCLUDE 'cpninstrument';

--cpnworkspacelib:attributes--

isTransitionReadyToBeBoundManually:
  (# ti: ^TransitionInstance;
     bd: ^BindingDialog;
     value: @boolean;
  enter (ti[],bd[])
  do ((not bd.manualBindingStarted) and (ti.status = isEnabled)) -> value;
  exit value
  #);


GetPossibleBindingsInstrument: CPNInstrument
  (# 
     CommandType:: GetPossibleBindingsCommand;
  #);

GetPossibleBindingsCommand: CPNCommand
  (# TargetType:: BindingDialog;
     
     notUndoable:: (# do true -> value #);
     
     relevant::
       (# 
       do (target.theTransitionInstance[],target[]) -> isTransitionReadyToBeBoundManually
            -> value;
       #);
     
     apply::
       (# 
       do
          target.showPossibleBindings;
          target.update;
       #);
  #);

CloseFiredBindingIndexInstrument: CPNInstrument
  (# 
     CommandType:: CloseFiredBindingIndexCommand;     
  #);

CloseFiredBindingIndexCommand: CPNCommand
  (# TargetType:: BindingDialog;
     
     notUndoable:: (# do true -> value #);
     
     relevant::<
       (# ti: ^TransitionInstance;
       do 
          target.theTransitionInstance[] -> ti[];
          target.manualBindingStarted or
          ti.justFiredWithManualBinding -> value;          
          INNER;
       #);
     
     apply::
       (# 
       do
          target.clear;
       #);
  #);

FireWithBindingInstrument: CPNInstrument
  (# 
     CommandType:: FireWithBindingCommand;
  #);

FireWithBindingCommand: CPNCommand
  (# TargetType:: BindingDialog;
     
     notUndoable:: (# do true -> value #);
     
     relevant::<
       (# 
       do
          target.manualBindingStarted -> value;
          INNER;
       #);
     
     apply::
       (# 
       do
          target.fireWithCurrentChoices;
          target.update;
        #);
  #);

FireAndCloseInstrument: CPNInstrument
  (# 
     CommandType:: FireAndCloseCommand;
  #);

FireAndCloseCommand: CPNCommand
  (# TargetType:: BindingDialog;
     
     notUndoable:: (# do true -> value #);

     relevant::
       (# 
       do
          target.manualBindingStarted -> value;
       #);

     apply::
       (# 
       do
          target.fireWithCurrentChoices;
          target.clear;
       #);

  #);
