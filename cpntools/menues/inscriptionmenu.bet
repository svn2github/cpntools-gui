(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN 'pagemenu';

INCLUDE '../instruments/creationinstruments';
INCLUDE '../instruments/deletioninstruments';
INCLUDE '../instruments/simulationinstruments';
INCLUDE '../instruments/navigationinstruments';
INCLUDE '../resources/texts/texts';

BODY 'private/inscriptionmenubody';

-- CPNWorkSpaceLib: attributes --

InscriptionMenu: PageElementMenu
  (# TargetType:: Inscription;
     
     relevant::<
       (# 
       do not (target.defaultInscription -> (target.getInscription).equal) -> value;
          (if value then
              inner;
          if);
       #);
    
  #);

MLInscriptionMenu: InscriptionMenu
  (# theMLInstrument: ^Instrument;
     RightItem::
       (# init:: (# <<SLOT MLInscriptionMenuRightItemInit:DoPart>> #);
       #);
     relevant::
       (# 
       do (target[], theMLInstrument.theHand[]) -> theMLInstrument.relevant -> value;
       #);
  #);

HierarchyInfoMenu: PageElementMenu
  (# TargetType::< HierarchyInfo;
  #);

PortTypeMenu: HierarchyInfoMenu
  (# TargetType::< PortType;
     
     RightItem::
     	(# init::
		(#
		do &ShowSocketPageInstrument[] -> theInstrument[];
                   theInstrument.init;
                   NamesInscriptionMenuShowPageItem -> getGlobalNames -> name[];
		#);
	#);
  #);

SubPageInfoMenu: HierarchyInfoMenu
  (# TargetType::< SubpageInfo;
     
     ShowSubPageItem: @MenuItem;
     
     RightItem::
       (# init::
            (#
            do NamesInscriptionMenuShowSubPageItem -> getGlobalNames -> name[];
               &ShowSubPageInstrument[] -> theInstrument[];
               theInstrument.init;
            #);
       #);
     
     BottomRightItem::
       (# init::
            (# 
            do &FlattenSubpageTagInstrument[] -> theInstrument[];
               theInstrument.init;
               NamesReplaceBySubpageItem -> getGlobalNames -> name[];
            #);
       #);
  #);

SubpageInfoMenuEnabled: SubpageInfoMenu
  (# theOneStepSubpageInfoInstrument: @OneStepSubpageInfoInstrument;
     init:: 
       (# 
       do theOneStepSubpageInfoInstrument.init;          
       #);
     LeftItem::
       (# init:: 
            (# 
            do NamesInstanceNodeMenuFireTransition 
                 -> getGlobalNames
                 -> name[];
               theOneStepSubpageInfoInstrument[] -> theInstrument[];
            #);          
       #);
     relevant::
       (# 
       do (target[], theHand[]) 
            -> theOneStepSubpageInfoInstrument.relevant
            -> value;
       #);     
  #);

CurrentMarkingMenu: CPNMenu
  (# TargetType:: SimulationItem;
     deleteItem::
       (# 
          init::
            (# 
            do NamesDeleteCurrentMarking -> getGlobalNames -> name[];
               &DeleteSimulationItemInstrument[] -> theInstrument[];  
               theInstrument.init;
            #);
       #);
  #);

