(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN 'cpnmenu';
INCLUDE '../instruments/creationinstruments';
INCLUDE '../instruments/historyinstruments';
INCLUDE '../resources/texts/texts';
INCLUDE '../wselements/index';

-- CPNWorkspaceLib: attributes --

HistoryMenu: CPNMenu
  (# TargetType:: theIndex.AbstractHistoryNode;
     
     undoItem: @SimpleItem
       (#
          onSelect::
            (# theCommandManager: ^CommandManager;
            do target.getNet ->  (getCommandManagerManager).getManager -> theCommandManager[];
               theCommandManager.undo;
            #);
          init::
            (#
            do 'Undo' -> name[];
               3 -> direction;
            #);
       #);
     
     redoItem: @SimpleITem
       (# onSelect::
            (# theCommandManager: ^CommandManager;
            do target.getNet ->  (getCommandManagerManager).getManager -> theCommandManager[];
               theCommandManager.redo;
            #);
          
          init::
            (#
            do 'Redo' -> name[];
               1 -> direction;
            #);
       #);
     
     DeleteItem::
       (# init::
            (# 
            do 'Clear history' -> name[];              
               &ClearHistoryInstrument[] -> theInstrument[];
               theInstrument.init;
            #);  
       #);
     
     init::
       (#
       do redoItem.init;
          redoItem[] -> add;
          undoItem.init;
          undoItem[] -> add;
       #);
  #);


CommandMenu: MarkingMenu
  (# TargetType:: theIndex.CommandNode;
     size:: (# do 6 -> value #);
     
     undoItem: @SimpleItem
       (# 
          onSelect::
            (# theHistoryNode: ^CPNIndex.AbstractHistoryNode;
            do target.father[] -> theHistoryNode[];
               target.getCommand -> (theHistoryNode.getCommandManager).undoUntil;
            #);
          init::
            (#
            do 'Undo' -> name[];
               3 -> direction;
            #);
       #);
     redoItem: @SimpleITem
       (# onSelect::
            (# theHistoryNode: ^CPNIndex.AbstractHistoryNode;
            do target.father[] -> theHistoryNode[];
               target.getCommand -> (theHistoryNode.getCommandManager).redoUntil;
            #);
          init::
            (#
            do 'Redo' -> name[];
               1 -> direction;
            #);
       #);
     
     init::
       (# 
       do true -> rotate;
          redoItem.init;
          redoItem[] -> add;
          undoItem.init;
          undoItem[] -> add;
          
       #);
  #);
