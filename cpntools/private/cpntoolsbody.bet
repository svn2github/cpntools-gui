(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN '../cpntools';
INCLUDE '../wselements/index';

-- savereportchanged: doPart --
do (# option: ^BooleanOption;
   do 'save_bindings' -> (getGlobalOptions).find -> option[];
      (if option[] <> NONE then
          theIndex.theIndexNodes.scan
          (#
          do (if current## <= theIndex.NetNode## then
	           (theValue, (option.theValue)) -> (current[]->QUA(# as:: theIndex.NetNode; #)).net.setReportOptions;
             if);
          #);
	if);
   #);

-- befairnesschanged: doPart --
do (# option: ^BooleanOption;
   do 'global_fairness' -> (getGlobalOptions).find -> option[];
      (if option[] <> NONE then
          theIndex.theIndexNodes.scan
          (#
          do (if current## <= theIndex.NetNode## then
	           (theValue, (option.theValue)) -> (current[]->QUA(# as:: theIndex.NetNode; #)).net.setFairnessOption;
             if);
          #);
	if);
   #);

-- globalfairnesschanged: doPart --
do (# option: ^BooleanOption;
   do 'fair_be' -> (getGlobalOptions).find -> option[];
      (if option[] <> NONE then
          theIndex.theIndexNodes.scan
          (#
          do (if current## <= theIndex.NetNode## then
	           ((option.theValue), theValue) -> (current[]->QUA(# as:: theIndex.NetNode; #)).net.setFairnessOption;
             if);
          #);
	if);
   #);

-- savebindingschanged: doPart --
do (#
   option: ^BooleanOption;
   do 'save_report' -> (getGlobalOptions).find -> option[];
      (if option[] <> NONE then
      if);
   #);
