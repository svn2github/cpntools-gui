(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN '../../cpnworkspace';

INCLUDE 'createfigures';

-- cpnworkspacelib: attributes --

ConstraintInscriptionFigure: Figure
  (# useDefaultHotspot::(# do true -> value; #);
     theTextItem: ^TextItem;
     constraintLabel: ^Text;
     theLine: ^Line;
     theCompletestyle: ^Completestyle; 
     
     init::
       (# theStyle: ^CompositeStyle;
          theStrokeStyle: ^StrokeStyle;
          theStrokeWidthStyle: ^StrokeWidthStyle;
          rectColor: ^Color;  
          point: ^Point2d;
          w, h: @real;
       do 
          &Line[] -> theLine[];
          theLine[]->add;
          &PointList[]->theLine.points[];
          (for 5 repeat &Point2d[]->point[]->theLine.points.append; for);     

          &Completestyle[]->theCompletestyle[];
          (Black[],NONE,1,0)->theCompletestyle;
          theCompletestyle[]->theLine.theStyle[];
          1->theLine.points.get->point[];
          (0,0)->point;          
          2->theLine.points.get->point[];
          (0,-12)->point; 
          3->theLine.points.get->point[];
          (15,-20)->point; 
          4->theLine.points.get->point[];
          (30,-12)->point; 
          5->theLine.points.get->point[];
          (30,0)->point; 
          &CompositeStyle[] -> theStyle[] -> theLine.theStyle[];
          black[] -> StrokeStyle -> theStyle.add;
          white[] -> FillStyle -> theStyle.add;
          
          &TextItem[] -> theTextItem[];
          (if theTextItem.content[] <> NONE then
              theTextItem.content[] -> arial.measureText -> (w, h);
           else 
	        (30, 10) -> (w, h);
          if);
          (15 - w / 2, -2) -> (theTextItem.x, theTextItem.y);
          
          black[] -> StrokeStyle -> theTextItem.theStyle[];
          theTextItem[] -> add;
       #);
     
     update::
       (# w, h: @real;
       do constraintLabel[] -> theTextItem.content[];
          (if theTextItem.content[] <> NONE then
              theTextItem.content[] -> arial.measureText -> (w, h);
           else 
	        (30, 10) -> (w, h);
          if);
          (15 - w / 2, -2) -> (theTextItem.x, theTextItem.y);
       #);
     
     onchanged::
       (# 
       do 'label' -> options.lookupText -> constraintLabel[];
       #);
  #);

ConstraintArcFigure: ArcFigure (#
  init::< (#
  do 3 -> theArrow.points.get -> theArrow.points.delete;
     0.6->theBasicStyle.arrowHeadSize;
     1->theArrow.points.get->point[];
     (0,0)->point;          
     2->theArrow.points.get->point[];
     (18,10)->point;          
  #);


#);
