(************************************************************************)
(* CPN Tools                                                            *)
(* Copyright 2010-2011 AIS Group, Eindhoven University of Technology    *)
(*                                                                      *)
(* CPN Tools is originally developed by the CPN Group at Aarhus         *)
(* University from 2000 to 2010. The main architects behind the tool    *)
(* are Kurt Jensen, Soren Christensen, Lars M. Kristensen, and Michael  *)
(* Westergaard.  From the autumn of 2010, CPN Tools is transferred to   *)
(* the AIS group, Eindhoven University of Technology, The Netherlands.  *)
(*                                                                      *)
(* This file is part of CPN Tools.                                      *)
(*                                                                      *)
(* CPN Tools is free software: you can redistribute it and/or modify    *)
(* it under the terms of the GNU General Public License as published by *)
(* the Free Software Foundation, either version 2 of the License, or    *)
(* (at your option) any later version.                                  *)
(*                                                                      *)
(* CPN Tools is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with CPN Tools.  If not, see <http://www.gnu.org/licenses/>.   *)
(************************************************************************)
ORIGIN '~beta/basiclib/basicsystemenv';
INCLUDE 'mlsocket';
BODY 'private/mldispatcherbody';

--- SystemLib:Attributes ---

MLDispatch:
  (# bis: ^MLBIS;
     reply: ^MLBIS;
  enter bis[]
  do &MLBIS[] -> reply[];
     3 -> reply.opcode;
     INNER;
  exit reply[]
  #);

MLDispatcher:
  (# Accept:
       (# bis: ^MLBIS;
          value: @Boolean;
       enter bis[]
       <<SLOT MLDispatcherAccept:DoPart>>
       exit value
       #);
     
     Dispatch:
       (# bis: ^MLBIS;
          reply: ^MLBIS;
       enter bis[]
       <<SLOT MLDispatcherDispatch:DoPart>>
       exit reply[]
       #);
     
     Register:
       (# subOpcode: @Integer;
          dispatch: ^MLDispatch;
       enter (subOpcode, dispatch[])
       <<SLOT MLDispatcherRegister:DoPart>>
       #);
     
     Unregister:
       (# subOpcode: @Integer;
       enter subOpcode
       <<SLOT MLDispatcherUnregister:DoPart>>
       #);
     
     Private: @<<SLOT MLDispatcherPrivate:Descriptor>>;
  #);

